apiVersion: v1
kind: Pod
metadata:
 name: myapp-pod
 labels:
   app: myapp
   type: front-end
spec:
  containers:
    - name: nginx-controller
      image: nginx
      ports:
      - containerPort: 8080
      resources:
        requests:
          memory: "64Mi"
          cpu: 1
        limits: 
          memory: "128Mi"
          cpu: 2
        
# --COMANDI E TEORIA--

# ROLLOUT E SOLLBACk

# la strategia di default per il rollout dei container in k8s è il rolling update ovvero viene aggiornato un pod alla volta in modo da non creare dei down dell' app temporanea
# è possibile anche eseguire il rollbacl, k8s tiene in memoria una copua della versione precedente
# per farlo kubectl rollout undo deployment
# per vedere lo storico kubectl rollout history depolyment
# per vedere lo status del deploy kubectl rollout status deployment
# la strategia applicata al deploy si può vedere con describe alla voce StrategyType
# -NODE AFFINITY-

# affinity:
#   nodeAffinity:
#     requiredDuringSchedulingIgnoredDuringExecution/preferredDuringSchedulingIgnoredDuringExecution:
#       nodeSelectorTerms:
#       - matchExpressions:
#         - key: size
#           operator: In / NotIn / Exists
#           values:
#           - Large
#           - Medium

# -NODE SELECTOR-

# nodeSelector:
#   size: Large

# per funzionare il nodeselector bisogna assegnare la label al node
# kubectl label nodes node-name label-key=label-value
# kubectl label nodes node01 size=Large

# -TAINTS & TOLERATIONS-

# tolerations:
#    - key: "app"
#      operatir: "Equal"
#      value: "blue"
#      effect: "NoSchedule"

# taint al nodo:kubectl taint nodes node-name key=value:taint-effect
# es: kubectl taint nodes node01 app=blue:NoSchedule


# -COMANDI VARI-
# per creare Pod: kubectl apply -f pod-definition.yaml
# si possono specificare dei comandi da eseguire nei pod da lanciare per farlo aggiugnere nel continer la voce args: valore (stessa indentazione del nome e dell' immagine del container )
# spec:
#  containers:
#    - name: nginx-controller
#      image: nginxù
#      command: ["sleedp2"] // corrisponde al comando
#      args: ["10"] // valore comando#
# per impostare un environment usare valure env
# env:
#  - name: nome
#    value: pink
# i valori env di possono salvare su un file apposito chiamato configmap e importare questi dati nel pod
# envFrom:
#  - configMapRef: 
#         name: nome_config
#
# secrets
#
# envFrom:
#  - secretRef: 
#         name: nomesecret
#